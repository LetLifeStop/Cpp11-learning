#include<bits/stdc++.h>
using namespace std;
# define ll long long
# define inf 0x3f3f3f3f
# define LL_inf (1ll<<60)
const int maxn = 2e6+100;
int a[maxn];
int main()
{
    int num=0;
    for(int  i = 2 ; i <= 10 ;  i+= 2 )
    {
        a[ num++ ] = i ;
    }
    for(int i = 0 ; i < num ;  i++)
    {
        cout<< i <<" "<< a[i] <<endl;
    }
    int *ptr = a ;
    for(int i=0; i< 5;  i++)
    {
        cout<<(*ptr)<<endl;
        (ptr++);
    }
    return 0;
}
ptr 一开始指向a数组的第一个位置，每一次++表示从当前位置往后移动sizeof(a)个位置，这样就可以顺序访问数组里面的内容了
如果数组是从第一个开始存储的，那么可以在一开始就ptr++ .
// 打了一天的笔记结果网崩了，就啥也没了....
#include<bits/stdc++.h>
using namespace std;
const int size = 100;
int main()
{
    char str[] = "hello world";
    char sec[] = "code world";
    /// 这两个的共同点是所指向的字符串改变的话，这个指针代表的内容也会改变
    const char *ptr1 = str;
    cout << ptr1 << endl;
    strcpy(str,"hi world");
    cout << ptr1 << endl;
    ptr1 = sec;//直接改变指针指向
    cout << ptr1 << endl;
    sec[0] = 'o';
    cout << ptr1 << endl; ///一旦这个指针指向这个字符串，这个指针所代表的内容是无法改 ; 这个指针还可以指向其他地址；

//   ptr1[0] = 'a';//直接改变指针指向的值,报错

    char ss[] = "good game";
    char *const ptr2 = ss;/// 一旦这个指针指向这个字符串，这个指针所代表的内容是可以改变的 ; 这个指针不能再指向其他地址;
    cout << ptr2 << endl;
    ptr2[0] ='a';//直接改变指针指向的值
    cout << ptr2 << endl;
    strcpy(ptr2, "last");
    cout << ptr2 << endl;
    ss[0] = 'z';
    cout << ptr2 << endl;

  //  ptr2 = sec;//直接改变指针指向,报错
  //  system("pause");
}

